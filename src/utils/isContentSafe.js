import { OPENAI_API_KEY } from '@env';

// üéØ DANH S√ÅCH T·ª™ C·∫§M G·ªêC (c√≥ d·∫•u, d·ªÖ ƒë·ªçc)
const rawBadWords = [
    // ‚úÖ Th√¥ t·ª•c/ch·ª≠i b·∫≠y ph·ªï bi·∫øn
    "c·ª©t", "ƒë√©o", "l·ªìn", "loz", "c·∫∑c", "d√°i", "ƒë·ªãt", "ƒë·ª•", "ƒëƒ©", "ƒëƒ© m·∫π", "con ƒëƒ©", "m√° m√†y", "m·∫π m√†y", "cha m√†y", "v√∫", "bu·ªìi",
    "d√¢m", "d√¢m ƒë√£ng", "cave", "ph√≤", "ph√≤ ƒëƒ©", "th·∫±ng ch√≥", "con ch√≥", "ch√≥ m√°", "√≥c ch√≥", "ngu nh∆∞ b√≤", "ngu nh∆∞ l·ª£n", "ƒë·∫ßn", "v√¥ h·ªçc",
    "th·∫±ng ƒë·∫ßn", "m·∫•t d·∫°y", "v√¥ gi√°o d·ª•c", "c√∫t m·∫π m√†y", "c√¢m m·ªìm", "m·∫π ki·∫øp", "th·∫±ng kh·ªën", "ƒë·ªì kh·ªën", "ƒë·ªì ngu", "√≥c l·ª£n", "ƒë·∫ßu b√≤", "ngu vl", "vkl", "vl",
  
    // ‚úÖ L√°ch vi·∫øt: vi·∫øt t·∫Øt
    "cc", "dm", "dcm", "cl", "clm", "cmm", "vcl", "vkl", "vl", "dkm", "djt", "djtme", "bome", "meo", "ditme", "lon", "dit", "duma", "dmm", "mml", "occho", "oc vit",
  
    // ‚úÖ Mi·ªát th·ªã gi·ªõi t√≠nh
    "b√™ ƒë√™", "p√™ ƒë√™", "b√≥ng l·ªô", "ƒë·ªìng b√≥ng", "pede", "gay l√≤i", "b√≥ng l√≤i", "les", "less", "√°i nam √°i n·ªØ", "th√°i gi√°m",
  
    // ‚úÖ Mi·ªát th·ªã d√¢n t·ªôc, v√πng mi·ªÅn, vƒÉn h√≥a
    "b·∫Øc k·ª≥", "nam k·ª≥", "trung k·ª≥", "mi·ªÅn qu√™", "d√¢n t·ªôc thi·ªÉu s·ªë", "m·ªçi r·ª£", "m·ªçi ƒëen", "m·ªçi tr·∫Øng", "m·ªçi mi·ªÅn n√∫i", "ƒë·ªì nh√† qu√™", "ƒÉn l√¥ng ·ªü l·ªó",
  
    // ‚úÖ B·∫°o l·ª±c, ƒëe do·∫°
    "tao gi·∫øt m√†y", "tao ƒë·∫≠p m√†y", "tao cho m√†y ƒÉn ƒë·∫•m", "tao b√≥p c·ªï m√†y", "tao xi√™n m√†y", "tao l√†m th·ªãt m√†y", "tao ch√©m m√†y", "tao ƒë·∫≠p ch·∫øt", "gi·∫øt ng∆∞·ªùi", "ƒë√¢m ch·∫øt", "t·∫°t axit", "hi·∫øp", "hi·∫øp d√¢m", "c∆∞·ª°ng hi·∫øp", "d·ªça gi·∫øt", "ƒëe do·∫°",
  
    // ‚úÖ X√∫c ph·∫°m ng∆∞·ªùi y·∫øu th·∫ø
    "th·∫±ng kh√πng", "con ƒëi√™n", "b·ªã t√¢m th·∫ßn", "n√£o t√†n", "d·ªã t·∫≠t", "khuy·∫øt t·∫≠t", "m√π", "ƒëui", "c√¢m", "ƒëi·∫øc", "qu√®", "th·∫±ng qu√®", "con qu√®",
  
    // ‚úÖ T·ª± t·ª≠, nh·∫°y c·∫£m n·∫∑ng
    "t·ª± t·ª≠", "mu·ªën ch·∫øt", "ch·∫øt m·∫π ƒëi", "ƒëi ch·∫øt ƒëi", "b·∫Øn v√†o ƒë·∫ßu", "treo c·ªï", "nh·∫£y l·∫ßu", "c·∫Øt c·ªï", "r·∫°ch tay", "u·ªëng thu·ªëc t·ª± t·ª≠"
  ];
  

// ‚úÖ H√†m chu·∫©n ho√°: b·ªè d·∫•u, k√Ω t·ª± ƒë·∫∑c bi·ªát, thu g·ªçn kho·∫£ng tr·∫Øng
const normalize = (text) =>
  text
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "") // b·ªè d·∫•u ti·∫øng Vi·ªát
    .replace(/[^\w\s]|_/g, "")       // b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
    .replace(/\s+/g, " ")            // b·ªè kho·∫£ng tr·∫Øng th·ª´a
    .trim();

// ‚úÖ Danh s√°ch t·ª´ c·∫•m ƒë√£ chu·∫©n ho√° (kh√¥ng d·∫•u, kh√¥ng k√Ω t·ª±)
const badWords = rawBadWords.map(normalize);

// ‚ö° Ki·ªÉm tra t·ª´ c·∫•m local
const containsBadWords = (text) => {
  const clean = normalize(text);

  return badWords.some((word) => {
    const pattern = new RegExp(`\\b${word}\\b`, 'i'); // match ƒë√∫ng t·ª´
    return pattern.test(clean);
  });
};

// üß† G·ªçi OpenAI Moderation API ƒë·ªÉ ph√¢n t√≠ch ng·ªØ c·∫£nh
const checkWithOpenAI = async (text) => {
  const res = await fetch('https://api.openai.com/v1/moderations', {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${OPENAI_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ input: text }),
  });

  const data = await res.json();
  const flagged = data.results?.[0]?.flagged || false;
  const categories = data.results?.[0]?.categories || {};

  return { flagged, categories };
};

// ‚úÖ H√†m ch√≠nh: Ki·ªÉm tra n·ªôi dung an to√†n hay kh√¥ng
export const isContentSafe = async (text) => {
  const result = {
    ok: true,
    reason: '',
    flaggedBy: null,
  };

  // ‚ö†Ô∏è B∆∞·ªõc 1: Ki·ªÉm tra local bad words
  if (containsBadWords(text)) {
    result.ok = false;
    result.reason = 'N·ªôi dung ch·ª©a t·ª´ ng·ªØ kh√¥ng ph√π h·ª£p.';
    result.flaggedBy = 'local';
    return result;
  }

  // üß† B∆∞·ªõc 2: G·ªçi OpenAI n·∫øu kh√¥ng c√≥ t·ª´ t·ª•c r√µ r√†ng
  try {
    const { flagged, categories } = await checkWithOpenAI(text);

    if (flagged) {
      result.ok = false;
      result.reason = 'AI ph√°t hi·ªán n·ªôi dung kh√¥ng ph√π h·ª£p.';
      result.flaggedBy = 'openai';
      result.categories = categories;
    }
  } catch (err) {
    console.warn('‚ö†Ô∏è L·ªói g·ªçi OpenAI Moderation:', err.message);
    // N·∫øu l·ªói m·∫°ng ‚Üí cho ph√©p g·ª≠i (b·∫°n c√≥ th·ªÉ thay ƒë·ªïi logic n√†y)
  }

  return result;
};
